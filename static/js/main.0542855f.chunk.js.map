{"version":3,"sources":["types/SelectedStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/filterTodos.ts","index.tsx"],"names":["SelectedStatus","TodoList","todos","setSelectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","userId","TodoFilter","selectedStatus","setSelectedStatus","searchQuery","setSearchQuery","value","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","fullURL","delay","Promise","resolve","setTimeout","then","fetch","res","json","error","Error","TodoModal","selectedTodo","selectedTodoId","useState","user","setUser","isUserLoaded","setIsUserLoaded","fetchUser","a","userFromServer","alert","useEffect","href","email","name","App","setTodos","isLoading","setIsLoading","visibleTodos","setVisibleTodos","hasErrorFromServer","setHasErrorFromServer","useMemo","find","fetchTodos","todosFromServer","todosToShow","queryToLowerCase","toLowerCase","filter","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0542855f.chunk.js","sourcesContent":["export enum SelectedStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodoId: (selectedTodoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, setSelectedTodoId }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr key={todo.id} data-cy=\"todo\">\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-success': todo.completed,\n              'has-text-danger': !todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => (setSelectedTodoId(todo.userId))}\n            >\n              <span className=\"icon\">\n                <i className=\"far fa-eye\" />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { ChangeEvent } from 'react';\nimport { SelectedStatus } from '../../types/SelectedStatus';\n\ninterface TodoFilterProps {\n  selectedStatus: string,\n  setSelectedStatus: (selectedStatus: SelectedStatus | string) => void,\n  searchQuery: string,\n  setSearchQuery: (searchQuery: string) => void,\n}\n\nexport const TodoFilter: React.FC<TodoFilterProps> = (\n  {\n    selectedStatus,\n    setSelectedStatus,\n    searchQuery,\n    setSearchQuery,\n  },\n) => {\n  const handleSelectedStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedStatus(event.target.value);\n  };\n\n  const handleSearchQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedStatus}\n            onChange={handleSelectedStatus}\n          >\n            <option value={SelectedStatus.ALL}>All</option>\n            <option value={SelectedStatus.ACTIVE}>Active</option>\n            <option value={SelectedStatus.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleSearchQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchQuery && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear Search\"\n              onClick={() => setSearchQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  try {\n    // eslint-disable-next-line prefer-template\n    const fullURL = BASE_URL + url + '.json';\n\n    return wait(300)\n      .then(() => fetch(fullURL))\n      .then(res => res.json());\n  } catch (error) {\n    throw new Error(`Error while fetching ${error}`);\n  }\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number | null) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface TodoModalProps {\n  selectedTodo: Todo | undefined,\n  selectedTodoId: number,\n  setSelectedTodoId: (selectedTodoId: number | 0) => void,\n}\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  selectedTodo,\n  selectedTodoId,\n  setSelectedTodoId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n  const fetchUser = async () => {\n    try {\n      const userFromServer = await getUser(selectedTodoId);\n\n      setUser(userFromServer);\n    } catch (error) {\n      alert(`there is an error ${error}`);\n    } finally {\n      setIsUserLoaded(true);\n    }\n  };\n\n  fetchUser();\n\n  useEffect(() => {\n    if (selectedTodo === null) {\n      setSelectedTodoId(0);\n    }\n  }, []);\n\n  return (\n    <div\n      className={classNames(\n        'modal',\n        { 'is-active': selectedTodoId !== null },\n      )}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodoId(0)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">Planned</strong>\n\n              {' by '}\n              {isUserLoaded && (\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { SelectedStatus } from './types/SelectedStatus';\nimport { filterTodos } from './utils/filterTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState(SelectedStatus.ALL);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [hasErrorFromServer, setHasErrorFromServer] = useState(false);\n\n  const selectedTodo = useMemo((): Todo | undefined => {\n    return todos.find(todo => todo.id === selectedTodoId);\n  }, [todos, selectedTodoId]);\n\n  const fetchTodos = async () => {\n    setHasErrorFromServer(false);\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setVisibleTodos(todosFromServer);\n      setIsLoading(false);\n    } catch {\n      setHasErrorFromServer(true);\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  useEffect(() => {\n    const todosToShow = filterTodos(todos, selectedStatus, searchQuery);\n\n    setVisibleTodos(todosToShow);\n  }, [todos, selectedStatus, searchQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={() => setSearchQuery}\n                selectedStatus={selectedStatus}\n                setSelectedStatus={() => setSelectedStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {hasErrorFromServer\n                ? <p>Error while fetching</p>\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    setSelectedTodoId={() => setSelectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodoId && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          selectedTodoId={selectedTodoId}\n          setSelectedTodoId={() => setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import { SelectedStatus } from '../types/SelectedStatus';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  selectedStatus: SelectedStatus,\n  searchQuery: string,\n) => {\n  const queryToLowerCase = searchQuery.toLowerCase();\n\n  let todosToShow = todos.filter(todo => {\n    switch (selectedStatus) {\n      case SelectedStatus.ALL:\n        return true;\n      case SelectedStatus.ACTIVE:\n        return !todo.completed;\n      case SelectedStatus.COMPLETED:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  if (searchQuery) {\n    todosToShow = todosToShow\n      .filter(todo => todo.title.toLowerCase().includes(queryToLowerCase));\n  }\n\n  return todosToShow;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}